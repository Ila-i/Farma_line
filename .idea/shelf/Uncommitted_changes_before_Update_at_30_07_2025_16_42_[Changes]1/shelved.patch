Index: profile_creation/iscrizione.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from abc import ABC\r\nfrom profile_creation.base_iscrizioni import *\r\nfrom sqlalchemy.orm import sessionmaker\r\n\r\nSession = sessionmaker(bind=engine)\r\nsession = Session()\r\n\r\nclass Persona (ABC) :\r\n    nome: str\r\n    cognome: str\r\n\r\n    def __init__(self):\r\n        self.nome = input(\"Inserire il proprio nome : \")\r\n        self.cognome = input(\"Inserire il proprio cognome : \")\r\n\r\nclass TesseraSanitaria :\r\n    codice_fiscale: str\r\n    sesso: str\r\n    luogo_nascita: str\r\n    provincia: str\r\n    data_nascita: str\r\n    data_scadenza: str\r\n    numero_identificazione_tessera: str\r\n\r\n    def controllo(self, messaggio: str, lunghezza: int) -> str : #controllo del numero dei caratteri alfanumerici( va aggiunto se si riesce il controllo più specifico o messo come eccezione\r\n       parametro = input(messaggio)\r\n       while len(parametro) != lunghezza :\r\n            parametro = input(f\" il parametro non è valido, riprovare : \")\r\n       return parametro\r\n\r\n#TODO quando possibile inserire controllo data di nascita e scadenza tessera sanitaria\r\n\r\n    def __init__(self):\r\n        print( \" Di seguito si inseriscano i dati della tessera sanitaria : \")\r\n        self.codice_fiscale = self.controllo(\" CODICE FISCALE :\", 16) # nel codice fiscale si contano 16 caratteri alfanumerici\r\n        self.sesso = self.controllo(\" SESSO : \", 1)\r\n        self.luogo_nascita = input(\" LUOGO DI NASCITA : \")\r\n        self.provincia = self.controllo(\" PROVINCIA : \", 2)\r\n        self.data_nascita = self.controllo(\" DATA DI NASCITA (gg/mm/aaaa) : \", 10)\r\n        self.data_scadenza = self.controllo(\" DATA DI SCADENZA (gg/mm/aaaa) : \", 10)\r\n        self.numero_identificazione_tessera = self.controllo(\" NUMERO IDENTIFICAZIONE TESSERA : \", 20)# sulla tessera sanitaria fisica sono 20 caratteri alfanumerici\r\n\r\nclass Cliente(Persona):\r\n    t_s: TesseraSanitaria #t_s abbreviazione tessera sanitaria\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.t_s = TesseraSanitaria()\r\n    #def ricerca () # da database per controllo su presenza o meno della persona\r\n\r\nclass TesserinoProfessionale :\r\n    ordine_di_appartenenza: str # indica il settore lavorativo a cui appartieni\r\n    n_matricola : str # indica il numero di iscrizione all'albo di riferimento\r\n\r\n    def __init__(self, ordine :str):\r\n        self.ordine_di_appartenenza = ordine\r\n        self.n_iscrizione_albo = input(\"Inserire il proprio numero di matricola : \")\r\n\r\nclass Farmacista(Persona):\r\n    t_p: TesserinoProfessionale #t_p abbreviazione tesserino professionale\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.t_p = TesserinoProfessionale(\"farmacista\")\r\n    #def ricerca () # da database per controllo su presenza o meno della persona\r\n\r\nclass ProfiloUtente :\r\n    nome_utente:str\r\n    password: str\r\n    utente: Persona\r\n\r\n    def __init__(self,user : Persona):\r\n        self.utente = user\r\n        self.nome_utente = input(\" inserire un nome utente : \") # inserire controllo per corrispondenza profilo utente\r\n        self.password = input(\" inserire una password : \")\r\n\r\n\r\ndef iscriversi(user: Persona) -> ProfiloUtente:\r\n\r\n    if isinstance(user, Cliente) : # processo di creazione account cliente\r\n        cliente = session.query(ClienteDB).filter_by(codice_fiscale=user.t_s.codice_fiscale).first()\r\n\r\n        if cliente:\r\n            print(\"utente già registrato\")\r\n        else:\r\n            profilo = ProfiloUtente(user)\r\n            print(f\"\"\"registrazione effettuata con successo.\r\n                     Benvenuto {profilo.nome_utente} ! \"\"\")\r\n\r\n            # Crea le istanze dei modelli SQLAlchemy da salvare\r\n            tessera = TesseraSanitariaDB(\r\n                codice_fiscale=user.t_s.codice_fiscale,\r\n                sesso=user.t_s.sesso,\r\n                luogo_nascita=user.t_s.luogo_nascita,\r\n                provincia=user.t_s.provincia,\r\n                data_nascita=user.t_s.data_nascita,\r\n                data_scadenza=user.t_s.data_scadenza,\r\n                numero_identificazione_tessera=user.t_s.numero_identificazione_tessera\r\n            )\r\n            session.add(tessera)\r\n            session.commit()\r\n\r\n            cliente_db = ClienteDB(\r\n                nome=user.nome,\r\n                cognome=user.cognome,\r\n                codice_fiscale=user.t_s.codice_fiscale\r\n            )\r\n            session.add(cliente_db)\r\n            session.commit()\r\n\r\n            return profilo\r\n\r\n    elif isinstance(user, Farmacista):  # processo di creazione account farmacista\r\n        farmacista = session.query(FarmacistaDB).filter_by(n_matricola=user.t_p.n_matricola).first()\r\n\r\n        if farmacista:\r\n            print(\"utente già registrato\")\r\n        else:\r\n            profilo = ProfiloUtente(user)\r\n            print(f\"\"\"registrazione effettuata con successo.\r\n                     Benvenuto {profilo.nome_utente} ! \"\"\")\r\n\r\n            # Crea le istanze dei modelli SQLAlchemy da salvare\r\n            tessera = TesserinoProfessionaleDB(\r\n                n_matricola=user.t_p.n_matricola,\r\n                ordine_di_appartenenza=user.t_p.ordine_di_appartenenza\r\n            )\r\n            session.add(tessera)\r\n            session.commit()\r\n\r\n            farmacista_db = FarmacistaDB(\r\n                nome=user.nome,\r\n                cognome=user.cognome,\r\n                n_matricola=user.t_p.n_matricola\r\n            )\r\n            session.add(farmacista_db)\r\n            session.commit()\r\n\r\n            return profilo\r\n\r\n\r\n#verifica del codice\r\nprofile: ProfiloUtente\r\ncontrollo= int(input(\"\"\" Se si desidera iscriversi come cliente digitare 1\r\nSe si desidera iscriversi come farmacista digitare 2 \r\n\"\"\"))\r\nif controllo == 1 :\r\n    persona = Cliente()\r\nelif controllo == 2 :\r\n    persona = Farmacista()\r\n\r\nprint(\" profilo cliente \")\r\nprofile = iscriversi(persona)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/profile_creation/iscrizione.py b/profile_creation/iscrizione.py
--- a/profile_creation/iscrizione.py	(revision 215258f05353dccacc48a55227c7dcd9dd1216f7)
+++ b/profile_creation/iscrizione.py	(date 1753886399108)
@@ -54,7 +54,7 @@
 
     def __init__(self, ordine :str):
         self.ordine_di_appartenenza = ordine
-        self.n_iscrizione_albo = input("Inserire il proprio numero di matricola : ")
+        self.n_matricola = input("Inserire il proprio numero di matricola : ")
 
 class Farmacista(Persona):
     t_p: TesserinoProfessionale #t_p abbreviazione tesserino professionale
@@ -111,7 +111,7 @@
             return profilo
 
     elif isinstance(user, Farmacista):  # processo di creazione account farmacista
-        farmacista = session.query(FarmacistaDB).filter_by(n_matricola=user.t_p.n_matricola).first()
+        farmacista = session.query(FarmacistaDB).filter_by(matricola=user.t_p.n_matricola).first()
 
         if farmacista:
             print("utente già registrato")
@@ -131,7 +131,7 @@
             farmacista_db = FarmacistaDB(
                 nome=user.nome,
                 cognome=user.cognome,
-                n_matricola=user.t_p.n_matricola
+                matricola=user.t_p.n_matricola
             )
             session.add(farmacista_db)
             session.commit()
Index: .idea/Farma_line.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/.venv\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.12 (Farma_line)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Farma_line.iml b/.idea/Farma_line.iml
--- a/.idea/Farma_line.iml	(revision 215258f05353dccacc48a55227c7dcd9dd1216f7)
+++ b/.idea/Farma_line.iml	(date 1753886250916)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/.venv" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.12 (Farma_line)" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.13" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"Black\">\r\n    <option name=\"sdkName\" value=\"Python 3.12 (Farma_line)\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.12 (Farma_line)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 215258f05353dccacc48a55227c7dcd9dd1216f7)
+++ b/.idea/misc.xml	(date 1753886252501)
@@ -3,5 +3,5 @@
   <component name="Black">
     <option name="sdkName" value="Python 3.12 (Farma_line)" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12 (Farma_line)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.13" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
