Index: profile_creation/classi_iscrizione.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from abc import ABC, abstractmethod\r\nfrom profile_creation.base_iscrizione import *\r\nfrom sqlalchemy.orm import sessionmaker\r\n\r\nSession = sessionmaker(bind=engine)\r\nsession = Session()\r\n\r\n# funzione applicabile a tutte le classi\r\ndef controlla(messaggio: str, lunghezza: int) -> str : #controllo del numero dei caratteri alfanumerici( va aggiunto se si riesce il controllo più specifico o messo come eccezione\r\n   parametro = input(messaggio)\r\n   while len(parametro) != lunghezza :\r\n        parametro = input(f\" il parametro non è valido, riprovare : \")\r\n   return parametro\r\n\r\nclass Persona (ABC) :\r\n    nome: str\r\n    cognome: str\r\n\r\n    def __init__(self):\r\n        self.nome = input(\"Inserire il proprio nome : \")\r\n        self.cognome = input(\"Inserire il proprio cognome : \")\r\n\r\n    @abstractmethod\r\n    def iscriversi(self):\r\n        ...\r\n\r\nclass ProfiloUtente :\r\n    nome_utente:str\r\n    password: str\r\n    utente: Persona\r\n\r\n    def __init__(self,user : Persona):\r\n        self.utente = user\r\n        self.nome_utente = input(\" inserire un nome utente : \") # inserire controllo per corrispondenza profilo utente\r\n        self.password = input(\" inserire una password : \")\r\n\r\n    def associazione_profilo_utente(self) -> None:\r\n\r\n        if isinstance(self.utente, Cliente):\r\n            prf = ProfiloUtenteDB(  # prf fa riferimento al profilo utente da associare alla relativa tebella\r\n                nome_utente=self.nome_utente,\r\n                password=self.password,\r\n                id_cliente=self.utente.t_s.codice_fiscale\r\n            )\r\n        elif isinstance(self.utente, Farmacista):\r\n            prf = ProfiloUtenteDB(\r\n                nome_utente=self.nome_utente,\r\n                password=self.password,\r\n                id_farmacista=self.utente.t_p.n_matricola\r\n            )\r\n        else:\r\n            prf = ProfiloUtenteDB()\r\n            print(\" il processo di associazione profilo non è andato a buon fine \")\r\n        session.add(prf)\r\n        session.commit()\r\n        return None\r\n\r\n    def controllo(self)->bool:\r\n        profilo_esistente = session.query(ProfiloUtenteDB).filter_by(nome_utente=self.nome_utente).first()\r\n        if profilo_esistente:\r\n            print(f\"Il nome utente '{self.nome_utente}' è già in uso. Scegliere un altro nome.\")\r\n            return False\r\n        else:\r\n            return True\r\n\r\nclass TesseraSanitaria :\r\n    codice_fiscale: str\r\n    sesso: str\r\n    luogo_nascita: str\r\n    provincia: str\r\n    data_nascita: str\r\n    data_scadenza: str\r\n    numero_identificazione_tessera: str\r\n\r\n    #TODO quando possibile inserire controllo data di nascita e scadenza tessera sanitaria\r\n\r\n    def __init__(self):\r\n        print( \" Di seguito si inseriscano i dati della tessera sanitaria : \")\r\n        self.codice_fiscale = controlla(\" CODICE FISCALE :\", 16) # nel codice fiscale si contano 16 caratteri alfanumerici\r\n        self.sesso = controlla(\" SESSO : \", 1)\r\n        self.luogo_nascita = input(\" LUOGO DI NASCITA : \")\r\n        self.provincia = controlla(\" PROVINCIA : \", 2)\r\n        self.data_nascita = controlla(\" DATA DI NASCITA (gg/mm/aaaa) : \", 10)\r\n        self.data_scadenza = controlla(\" DATA DI SCADENZA (gg/mm/aaaa) : \", 10)\r\n        self.numero_identificazione_tessera = controlla(\" NUMERO IDENTIFICAZIONE TESSERA : \", 20)# sulla tessera sanitaria fisica sono 20 caratteri alfanumerici\r\n\r\n    def associazione_tessera_a_db(self):\r\n        # Crea le istanze dei modelli SQLAlchemy da salvare sulle tabelle\r\n        tessera = TesseraSanitariaDB(\r\n            codice_fiscale=self.codice_fiscale,\r\n            sesso=self.sesso,\r\n            luogo_nascita=self.luogo_nascita,\r\n            provincia=self.provincia,\r\n            data_nascita=self.data_nascita,\r\n            data_scadenza=self.data_scadenza,\r\n            numero_identificazione_tessera=self.numero_identificazione_tessera\r\n        )\r\n\r\n        session.add(tessera)\r\n        session.commit()\r\n\r\nclass TesserinoProfessionale :\r\n    ordine_di_appartenenza: str # indica il settore lavorativo a cui appartieni\r\n    n_matricola : str # indica il numero di iscrizione all'albo di riferimento\r\n\r\n    def __init__(self, ordine :str):\r\n        self.ordine_di_appartenenza = ordine\r\n        self.n_matricola = input(\"Inserire il proprio numero di matricola : \")\r\n\r\n    def associazione_tessera_a_db(self):\r\n        # Crea le istanze dei modelli SQLAlchemy da salvare sulle tabelle\r\n\r\n        tessera = TesserinoProfessionaleDB(\r\n            n_matricola=self.n_matricola,\r\n            ordine_di_appartenenza=self.ordine_di_appartenenza\r\n        )\r\n\r\n        session.add(tessera)\r\n        session.commit()\r\n\r\nclass Cliente(Persona):\r\n    t_s: TesseraSanitaria #t_s abbreviazione tessera sanitaria\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.t_s = TesseraSanitaria()\r\n\r\n    def iscriversi(self):\r\n        cliente = session.query(ClienteDB).filter_by(codice_fiscale=self.t_s.codice_fiscale).first()   #si definisce la ricerca da database per controllare se la persona è già registrata\r\n\r\n        if cliente:\r\n            print(\"Il codice fiscale inserito appartiene a un utente già registrato\")\r\n        else:\r\n            self.t_s.associazione_tessera_a_db()\r\n\r\n            cliente_db = ClienteDB(\r\n                nome=self.nome,\r\n                cognome=self.cognome,\r\n                codice_fiscale=self.t_s.codice_fiscale\r\n            )\r\n\r\n            session.add(cliente_db)\r\n            session.commit()\r\n            profilo = ProfiloUtente(self)\r\n            ck = profilo.controllo()\r\n            while not ck: #questo nuovo\r\n                    nuovo_nome = input(\"Inserisci un altro nome utente: \")\r\n                    profilo.nome_utente = nuovo_nome\r\n                    ck = profilo.controllo()\r\n\r\n            profilo.associazione_profilo_utente() #quest è giusto\r\n            print(f\"\"\"registrazione effettuata con successo.\r\n            Benvenuto {profilo.nome_utente} ! \"\"\")\r\n\r\n            #sezione per associazione profilo utente\r\n\r\nclass Farmacista(Persona):\r\n    t_p: TesserinoProfessionale #t_p abbreviazione tesserino professionale\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.t_p = TesserinoProfessionale(\"farmacista\")\r\n\r\n    def iscriversi(self):\r\n        farmacista = session.query(FarmacistaDB).filter_by(matricola=self.t_p.n_matricola).first() # si definisce la ricerca da database per controllare se la persona è già registrata\r\n\r\n        if farmacista:\r\n            print(\"La matricola inserita appartiene a un utente già registrato\")\r\n        else:\r\n            self.t_p.associazione_tessera_a_db()\r\n\r\n            farmacista_db = FarmacistaDB(\r\n                nome=self.nome,\r\n                cognome=self.cognome,\r\n                matricola=self.t_p.n_matricola\r\n            )\r\n            session.add(farmacista_db)\r\n            session.commit()\r\n\r\n            profilo = ProfiloUtente(self)\r\n            ck = profilo.controllo()\r\n            while not ck:  # questo nuovo\r\n                nuovo_nome = input(\"Inserisci un altro nome utente: \")\r\n                profilo.nome_utente = nuovo_nome\r\n                ck = profilo.controllo()\r\n\r\n            profilo.associazione_profilo_utente()\r\n\r\n            print(f\"\"\"registrazione effettuata con successo.\r\n            Benvenuto {profilo.nome_utente} ! \"\"\")\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/profile_creation/classi_iscrizione.py b/profile_creation/classi_iscrizione.py
--- a/profile_creation/classi_iscrizione.py	(revision 3c0258bc95223a6f596eb0dfa041f3b41c4860a3)
+++ b/profile_creation/classi_iscrizione.py	(date 1753950141849)
@@ -55,7 +55,7 @@
         session.commit()
         return None
 
-    def controllo(self)->bool:
+    def controllo_utente(self)->bool:
         profilo_esistente = session.query(ProfiloUtenteDB).filter_by(nome_utente=self.nome_utente).first()
         if profilo_esistente:
             print(f"Il nome utente '{self.nome_utente}' è già in uso. Scegliere un altro nome.")
@@ -142,7 +142,7 @@
             session.add(cliente_db)
             session.commit()
             profilo = ProfiloUtente(self)
-            ck = profilo.controllo()
+            ck = profilo.controllo_utente() #ck è abbreviazione di check
             while not ck: #questo nuovo
                     nuovo_nome = input("Inserisci un altro nome utente: ")
                     profilo.nome_utente = nuovo_nome
@@ -178,11 +178,11 @@
             session.commit()
 
             profilo = ProfiloUtente(self)
-            ck = profilo.controllo()
+            ck = profilo.controllo_utente()
             while not ck:  # questo nuovo
                 nuovo_nome = input("Inserisci un altro nome utente: ")
                 profilo.nome_utente = nuovo_nome
-                ck = profilo.controllo()
+                ck = profilo.controllo_utente()
 
             profilo.associazione_profilo_utente()
 
